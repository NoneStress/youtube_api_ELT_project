
"""
Module Soda pour la validation de la qualité des données
Adapté pour Astro CLI et PostgreSQL
"""

import logging
import subprocess
import os
from airflow.operators.bash import BashOperator
from airflow.decorators import task

logger = logging.getLogger(__name__)

# Configuration Soda
SODA_PATH = "/usr/local/airflow/include/soda"
DATASOURCE = "pg_datasource"


@task
def yt_elt_data_quality_python(schema):
"""
Version Python pour exécuter Soda (alternative si BashOperator ne fonctionne pas)

Args:
schema (str): Nom du schéma à valider (staging ou core)
"""
try:
# Configuration des variables d'environnement
env = os.environ.copy()
env.update({
'ELT_DATABASE_USERNAME': 'postgres',
'ELT_DATABASE_PASSWORD': 'postgres',
'POSTGRES_CONN_HOST': 'elt-project_c97cd5-postgres-1',
'POSTGRES_CONN_PORT': '5432',
'ELT_DATABASE_NAME': 'postgres',
'SCHEMA': schema
})

# Commande Soda
cmd = [
'soda', 'scan',
'-d', DATASOURCE,
'-c', f'{SODA_PATH}/configuration.yml',
'-v', f'SCHEMA={schema}',
f'{SODA_PATH}/check.yml'
]

logger.info(f"Executing Soda command: {' '.join(cmd)}")

# Exécuter la commande
result = subprocess.run(
cmd,
env=env,
capture_output=True,
text=True,
cwd='/usr/local/airflow'
)

# Afficher les résultats
if result.stdout:
logger.info(f"Soda output: {result.stdout}")
if result.stderr:
logger.error(f"Soda errors: {result.stderr}")

# Vérifier le code de retour
if result.returncode != 0:
raise Exception(f"Soda scan failed with return code {result.returncode}")

logger.info(f"Soda validation successful for schema: {schema}")
return True

except Exception as e:
logger.error(f"Error running Soda validation for schema: {schema} - {e}")
raise e

Omar HITAR
12:06 PM
# Règles de validation Soda pour les données YouTube
# Tests de qualité des données pour les tables yt_api

checks for yt_api:
# Test 1: Pas de Video_ID manquants
- missing_count("Video_ID") = 0:
name: "No missing Video_ID values"

# Test 2: Pas de Video_ID dupliqués
- duplicate_count("Video_ID") = 0:
name: "No duplicate Video_ID values"

# Test 3: Video_Title ne doit pas être vide
- missing_count("Video_Title") = 0:
name: "No missing Video_Title values"

# Test 4: Upload_Date ne doit pas être vide
- missing_count("Upload_Date") = 0:
name: "No missing Upload_Date values"

# Test 5: Duration ne doit pas être vide
- missing_count("Duration") = 0:
name: "No missing Duration values"

# Test 6: Video_Views doit être positif
- invalid_count("Video_Views") = 0:
name: "Video_Views must be positive"
invalid_count query: |
SELECT COUNT(*)
FROM yt_api
WHERE "Video_Views" < 0

# Test 7: Likes_Count doit être positif
- invalid_count("Likes_Count") = 0:
name: "Likes_Count must be positive"
invalid_count query: |
SELECT COUNT(*)
FROM yt_api
WHERE "Likes_Count" < 0

# Test 8: Comments_Count doit être positif
- invalid_count("Comments_Count") = 0:
name: "Comments_Count must be positive"
invalid_count query: |
SELECT COUNT(*)
FROM yt_api
WHERE "Comments_Count" < 0

# Test 9: Likes_Count ne doit pas être > Video_Views (logique métier)
- invalid_count("Likes_Count_greater_than_Views") = 0:
name: "Likes_Count cannot be greater than Video_Views"
invalid_count query: |
SELECT COUNT(*)
FROM yt_api
WHERE "Likes_Count" > "Video_Views"